--- WARNING: THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT IT.

--- Focus correction script. This script was generated and exported by RadCam extension.
--- For more information, visit https://github.com/BlueRobotics/radcam-manager

-- Usage: change the output controlling focus from CameraFocus to "Script1"
--        but assign CameraFocus to any other "Disabled" channel as we need to read it, as it allows fine-tuning

-- Unique key (0-200). Must not conflict with other scripts
local PARAM_TABLE_KEY = {{ param_table_key }}

-- Prefix for all parameter names in this table
local PARAM_PREFIX = {{ param_prefix }}

-- Add parameter table with N parameters
assert(param:add_table(PARAM_TABLE_KEY, PARAM_PREFIX, 2), 'could not add param table')

-- Define parameters with index (1-63), name, and default value
assert(param:add_param(PARAM_TABLE_KEY, 1, "ENABLE", 1), 'could not add ENABLE')
assert(param:add_param(PARAM_TABLE_KEY, 2, "GAIN", {{ margin_gain }}), 'could not add GAIN')

-- Initialize parameter objects
local ENABLE = Parameter()      -- when false, this bypasses the correlation
local GAIN = Parameter() -- this will allow us to move 5% beyeond closest/furthest focus lines, useful for making a new curve

--- Constants
local K_FOCUS = 92
local K_ZOOM = 180
local K_SCRIPT = {{ k_script }}

-- Bind them to physical parameter locations
assert(ENABLE:init(PARAM_PREFIX .. "ENABLE"), "Failed to init ENABLE")
assert(GAIN:init(PARAM_PREFIX .. "GAIN"), "Failed to init GAIN")

-- Lookup tables for closest and furthest focus points
local closest_points = {{ closest_points }}
local furthest_points = {{ furthest_points }}

assert(#closest_points >= 2, "closest_points requires at least 2 points")
assert(#furthest_points >= 2, "furthest_points requires at least 2 points")

-- Function to set focus and zoom to trim level
local function set_zoom_focus_to_trim()
    local focus_channel = SRV_Channels:find_channel(K_FOCUS)
    local focus_max = param:get("SERVO" .. focus_channel + 1 .. "_MAX")
    local focus_min = param:get("SERVO" .. focus_channel + 1 .. "_MIN")
    local focus_trim = param:get("SERVO" .. focus_channel + 1 .. "_TRIM")
    local focus_scaled = 1000 * (focus_trim - focus_min) / (focus_max - focus_min)
    SRV_Channels:set_output_scaled(K_FOCUS, focus_scaled)

    local zoom_channel = SRV_Channels:find_channel(K_ZOOM)
    local zoom_max = param:get("SERVO" .. zoom_channel + 1 .. "_MAX")
    local zoom_min = param:get("SERVO" .. zoom_channel + 1 .. "_MIN")
    local zoom_trim = param:get("SERVO" .. zoom_channel + 1 .. "_TRIM")
    local zoom_scaled = 1000 * (zoom_trim - zoom_min) / (zoom_max - zoom_min)
    SRV_Channels:set_output_scaled(K_ZOOM, zoom_scaled)
end

-- Linear interpolation function
local function lerp(x, x1, y1, x2, y2)
    return y1 + (x - x1) * (y2 - y1) / (x2 - x1)
end

-- Function to interpolate focus value from lookup table
local function interpolate_focus(zoom, points)
    -- Handle edge cases
    if zoom <= points[1].zoom then
        return points[1].focus
    end
    if zoom >= points[#points].zoom then
        return points[#points].focus
    end

    -- Find the bracketing points
    for i = 1, #points - 1 do
        if zoom >= points[i].zoom and zoom < points[i + 1].zoom then
            return lerp(zoom,
                points[i].zoom, points[i].focus,
                points[i + 1].zoom, points[i + 1].focus)
        end
    end

    return points[#points].focus -- fallback
end

-- Function to calculate focus position based on zoom position
local function calculate_focus(focus, zoom, margin_gain)
    -- Interpolate both closest and furthest focus values
    local closest_focus = interpolate_focus(zoom, closest_points)
    local furthest_focus = interpolate_focus(zoom, furthest_points)

    -- Linear interpolation between closest and furthest based on focus_delta
    local focus_delta = 0.5 + (focus - 1500) / 400
    -- local focus_delta = math.min(1.0, math.max(0.0, 0.5 + (focus - 1500) / 400))
    local range = (furthest_focus - closest_focus) * margin_gain
    local mid_point = closest_focus + range / 2
    return math.floor(mid_point + (focus_delta - 0.5) * range)
end

function start()
    if millis() <= 100000 then
        set_zoom_focus_to_trim()
    end
    return update, 100
end

function update()
    -- Retrieve values from parameters
    local enable_focus_and_zoom_correlation = ENABLE:get()
    local margin_gain = GAIN:get()

    -- Retrieve user-controlled focus and zoom
    local focus_input = SRV_Channels:get_output_pwm(K_FOCUS)
    local zoom_input = SRV_Channels:get_output_pwm(K_ZOOM)

    -- Computes the output focus
    local focus_output
    if enable_focus_and_zoom_correlation ~= 0 then
        focus_output = calculate_focus(focus_input, zoom_input, margin_gain)
    else
        focus_output = focus_input
    end

    -- Apply zoom to the output
    SRV_Channels:set_output_pwm(K_SCRIPT, focus_output)

    return update, 100
end

return start, 1000
